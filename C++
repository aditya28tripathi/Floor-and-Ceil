int findFloor(const vector<int> &a, int n, int x) {
    int low = 0, high = n - 1;
    int floor = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (a[mid] == x)
            return x; // Element found, return x as both floor and ceil
        else if (a[mid] < x) {
            floor = a[mid];
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return floor;
}

int findCeil(const vector<int> &a, int n, int x) {
    int low = 0, high = n - 1;
    int ceil = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (a[mid] == x)
            return x; // Element found, return x as both floor and ceil
        else if (a[mid] > x) {
            ceil = a[mid];
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return ceil;
}

pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
    // Find floor and ceil
    int floor = findFloor(a, n, x);
    int ceil = findCeil(a, n, x);
    return make_pair(floor, ceil);
}
